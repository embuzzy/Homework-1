train = CollegeFactor[tr,]
test = CollegeFactor[-tr,]
train<-na.omit(train)
test<-na.omit(test)
College.LM<-lm(train$Apps~., data = train)
#Test on test set
LMPredict<-predict.lm(College.LM, newdata = test)
LM_MSE =  mean((LMPredict - test[,2])^2)
LM_RMSE = sqrt(LM_MSE)
summary(College.LM)
print(LM_RMSE)
Ridge.Fit = glmnet(as.matrix(train[,-2]), as.matrix(train[,1]), alpha=0)
library(glmnet)
Ridge.Fit = glmnet(as.matrix(train[,-2]), as.matrix(train[,1]), alpha=0)
train<-na.omit(train)
test<-na.omit(test)
head(train)
head(CollegeFactor)
head(Hitters)
x = model.matrix(Apps~., train)[,-1]
x
head(x)
Ridge.Fit = glmnet(x,y,alpha=0, lambda = grid)
y = train$Apps
Ridge.Fit = glmnet(x,y,alpha=0, lambda = grid)
Ridge.Fit = glmnet(x,y,alpha=0)
CV.R = cv.glmnet(x, y,alpha=0, nfolds = 10)
LamR = CV.R$lambda.1se
xtest = model.matrix(Apps~., test)[-1]
Ridge.Predict = predict(Ridge.Fit, s = LamR, newx=xtest)
head(xtest)
head(x)
xtest = model.matrix(Apps~., test)[,-1]
Ridge.Predict = predict(Ridge.Fit, s = LamR, newx = xtest)
RidgeMSE =  mean((Ridge.Predict - test[,1])^2)
RidgeMSE =  mean((Ridge.Predict - test[,2])^2)
RidgeRMSE = sqrt(RidgeMSE)
Ridge.coef = predict(Ridge.Fit, type = "coefficients", s = LamR)[1:5,]
print(RidgeRMSE)
Lasso.Fit = glmnet(x,y)
CV.L = cv.glmnet(x, y,alpha=1, nfolds = 10)
LamL = CV.L$lambda.1se
Lasso.Predict = predict(Lasso.Fit, s = LamL, newx = xtest)
LassoMSE =  mean((Lasso.Predict - test[,2])^2)
LassoRMSE = sqrt(LassoMSE)
Ridge.coef = predict(Ridge.Fit, type = "coefficients", s = LamR)[1:17,]
Lasso.coef = predict(Lasso.Fit, type = "coefficients", s = LamL)[1:17,]
print(LassoRMSE)
print(LamR)
print(LamL)
print(Lasso.coef)
print(Lasso.coef[[!=0]])
print(Lasso.coef[!=0])
print(Lasso.coef>0)
L.index = Lasso.coef>0
Lasso.coef[L.index==TRUE]
print(Lasso.coef[L.index==TRUE])
instal.packages("pls")
library(pls)
install.packages("pls")
library(pls)
pcr.fit = pct(Apps~., data = test, scale = TRUE, validation = "CV")
pcr.fit = pcr(Apps~., data = test, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
validationplot(pcr.fit, val.type = "MSEP")
set.seed(1)
set.seed(42)
set.seed(1)
pcr.fit = pcr(Apps~., data = test, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
?par()
par(mfrow =7)
par(mfrow =c(7,7))
axis(1, at = 1)
validationplot(pcr.fit, val.type = "MSEP")
validationplot(pcr.fit, val.type = "MSEP")
dev.off()
validationplot(pcr.fit, val.type = "MSEP")
?pcr
summary(pcr.fit)
?MSEP
MSEP(pcr.fit)
print(MSEP(pcr.fit))
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pcr.fit))
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, test, ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 10)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
set.seed(42)
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pcr.fit))
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
pcr.fit = plsr(Apps~., data = train, scale = TRUE, validation = "CV")
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
pls.fit = plsr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pls.fit))
validationplot(pls.fit, val.type = "MSEP")
pls.pred = predict(pls.fit, test[,-2], ncomp = 5)
PLS_MSE = mean((pls.pred-test[,2])^2)
PLS_RMSE = sqrt(PLS_MSE)
print(PLS_RMSE)
?College
min(College$Apps)
max(College$Apps)
plot(College$Apps, College$Enroll)
College[College$Apps == 48094,]
print(LM_RMSE)
CollegeFactor = CollegeFactor[CollegeFactor$Apps<40000,]
train = CollegeFactor[tr,]
test = CollegeFactor[-tr,]
train<-na.omit(train)
test<-na.omit(test)
#Part b
#Fit linear model
College.LM<-lm(train$Apps~., data = train)
#Test on test set
LMPredict<-predict.lm(College.LM, newdata = test)
LM_MSE =  mean((LMPredict - test[,2])^2)
LM_RMSE = sqrt(LM_MSE)
summary(College.LM)
print(LM_RMSE)
#Part c
#Fit Ridge model
library(glmnet)
##Use model matrix to update variabes into proper format for glmnet
x = model.matrix(Apps~., train)[,-1]
y = train$Apps
##Fit Ridge model & do cross-validation to determine optimal lambda
Ridge.Fit = glmnet(x,y,alpha=0)
CV.R = cv.glmnet(x, y,alpha=0, nfolds = 10)
#Recording Tuned Lambda
LamR = CV.R$lambda.1se
#Predict on test data:
xtest = model.matrix(Apps~., test)[,-1]
Ridge.Predict = predict(Ridge.Fit, s = LamR, newx = xtest)
RidgeMSE =  mean((Ridge.Predict - test[,2])^2)
RidgeRMSE = sqrt(RidgeMSE)
Ridge.coef = predict(Ridge.Fit, type = "coefficients", s = LamR)[1:17,]
print(RidgeRMSE)
print(LamR)
#Part d
#Fit Lasso model
##Fit Ridge model & do cross-validation to determine optimal lambda
Lasso.Fit = glmnet(x,y)
CV.L = cv.glmnet(x, y,alpha=1, nfolds = 10)
#Recording Tuned Lambda
LamL = CV.L$lambda.1se
#Predict on test data:
Lasso.Predict = predict(Lasso.Fit, s = LamL, newx = xtest)
LassoMSE =  mean((Lasso.Predict - test[,2])^2)
LassoRMSE = sqrt(LassoMSE)
Lasso.coef = predict(Lasso.Fit, type = "coefficients", s = LamL)[1:17,]
L.index = Lasso.coef>0
print(LassoRMSE)
print(LamL)
print(Lasso.coef[L.index==TRUE])
##PCR Model - Part e
library(pls)
set.seed(42)
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pcr.fit))
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
#PLS Model - Part f
pls.fit = plsr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pls.fit))
validationplot(pls.fit, val.type = "MSEP")
pls.pred = predict(pls.fit, test[,-2], ncomp = 5)
PLS_MSE = mean((pls.pred-test[,2])^2)
PLS_RMSE = sqrt(PLS_MSE)
print(PLS_RMSE)
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pcr.fit))
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 9)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
n = length(College$Private)
set.seed(42)
tr = sample(1:n, .8*n)
Private.f = factor(College$Private)
CollegeFactor = data.frame(Private.f, College[-1])
#CollegeFactor = CollegeFactor[CollegeFactor$Apps<40000,]
train = CollegeFactor[tr,]
test = CollegeFactor[-tr,]
train<-na.omit(train)
test<-na.omit(test)
#Part b
#Fit linear model
College.LM<-lm(train$Apps~., data = train)
#Test on test set
LMPredict<-predict.lm(College.LM, newdata = test)
LM_MSE =  mean((LMPredict - test[,2])^2)
LM_RMSE = sqrt(LM_MSE)
summary(College.LM)
print(LM_RMSE)
#Part c
#Fit Ridge model
library(glmnet)
##Use model matrix to update variabes into proper format for glmnet
x = model.matrix(Apps~., train)[,-1]
y = train$Apps
##Fit Ridge model & do cross-validation to determine optimal lambda
Ridge.Fit = glmnet(x,y,alpha=0)
CV.R = cv.glmnet(x, y,alpha=0, nfolds = 10)
#Recording Tuned Lambda
LamR = CV.R$lambda.1se
#Predict on test data:
xtest = model.matrix(Apps~., test)[,-1]
Ridge.Predict = predict(Ridge.Fit, s = LamR, newx = xtest)
RidgeMSE =  mean((Ridge.Predict - test[,2])^2)
RidgeRMSE = sqrt(RidgeMSE)
Ridge.coef = predict(Ridge.Fit, type = "coefficients", s = LamR)[1:17,]
print(RidgeRMSE)
print(LamR)
#Part d
#Fit Lasso model
##Fit Ridge model & do cross-validation to determine optimal lambda
Lasso.Fit = glmnet(x,y)
CV.L = cv.glmnet(x, y,alpha=1, nfolds = 10)
#Recording Tuned Lambda
LamL = CV.L$lambda.1se
#Predict on test data:
Lasso.Predict = predict(Lasso.Fit, s = LamL, newx = xtest)
LassoMSE =  mean((Lasso.Predict - test[,2])^2)
LassoRMSE = sqrt(LassoMSE)
Lasso.coef = predict(Lasso.Fit, type = "coefficients", s = LamL)[1:17,]
L.index = Lasso.coef>0
print(LassoRMSE)
print(LamL)
print(Lasso.coef[L.index==TRUE])
##PCR Model - Part e
library(pls)
set.seed(42)
pcr.fit = pcr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pcr.fit))
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, test[,-2], ncomp = 5)
PCR_MSE = mean((pcr.pred-test[,2])^2)
PCR_RMSE = sqrt(PCR_MSE)
print(PCR_RMSE)
#PLS Model - Part f
pls.fit = plsr(Apps~., data = train, scale = TRUE, validation = "CV")
print(MSEP(pls.fit))
validationplot(pls.fit, val.type = "MSEP")
pls.pred = predict(pls.fit, test[,-2], ncomp = 5)
PLS_MSE = mean((pls.pred-test[,2])^2)
PLS_RMSE = sqrt(PLS_MSE)
print(PLS_RMSE)
library(MASS)
#Find out about Boston dataset using the?
?Boston
pairs(~crim+zn, Boston)
pairs(~age+rm, Boston)
pairs(~indus+nox, Boston)
plot(Boston$age, Boston$crim, xlab="% houses built prior to 1940", ylab = "crime rate")
plot(Boston$tax, Boston$crim, xlab="property tax rate per $10,000", ylab = "crime rate")
plot(Boston$lstat, Boston$crim, xlab="% of population in lower status", ylab = "crime rate")
RangeArray = matrix(0,2,1)
for (k in 1:ncol(Boston)){
Range = range(Boston[,k])
#transpose range so that min is the first row of a column and max is the second row
#in the same column
Range = t(t(Range))
#Add the new column to the Range Array
if(k==1){
RangeArray[,k]=Range[,k]
}else{
RangeArray = cbind(RangeArray, Range)
}
}
#Rename so that each column has the name of the variable it is the range for
colnames(RangeArray) = c("crime", "zn", "indus","chas","nox", "rm","age", "dis", "rad", "tax", "ptratio","black", "lstat", "mdev")
print(RangeArray)
print(Boston[Boston$crim>20,])
MedvMin = which.min(Boston$medv)
MedvMin
MedvMin = which.min(Boston$medv)
#Suburb #399.  It has median values of $5000
#print out the stas for Boston #399 & compare to ranges
print(Boston[MedvMin,])
print(RangeArray)
greater7 = Boston[Boston$rm >7,]
print(length(greater7$rm))
#Select out the rows with greater than 8 rooms & print length to console
#Also print the actual data associated to these communities
greater8 = Boston[Boston$rm>8,]
print(length(greater8$rm))
print(greater8)
library(ggplot2)
greenbuildings <- read.csv("greenbuildings.csv", row.names=1)
setwd("~/MSBA/Summer 2018/Intro to Predictive Modelling/Class Examples")
greenbuildings <- read.csv("greenbuildings.csv", row.names=1)
greenbuildings <- read.csv("greenbuildings.csv")
head(greenbuildings)
pairs(greenbuildings)
pairs(greenbuildings$green_rating~leasing_rate)
pairs(greenbuildings$green_rating~greenbuildings$leasing_rate)
greenbuildings$cluster_compare = greenbuildings$Rent-greenbuildings$cluster_rent
onlygreen = greenbuildings[greenbuildings$green_rating=1,]
onlygreen = greenbuildings[greenbuildings$green_rating==1,]
nongreen = greenbuildings[-onlygreen,]
nongreen = greenbuildings[-onlygreen]
nongreen = greenbuildings[greenbuildings$green_rating==0,]
plot(onlygreen$cluster_compare, onlygreen$leasing_rate)
qplot(greenbuildings$age, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='age', ylab='cluster compare')
qplot(greenbuildings$cluster, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='age', ylab='cluster compare')
qplot(greenbuildings$Rent, greenbuildings$size, color=greenbuildings$green_rating, xlab='age', ylab='cluster compare')
qplot(onlygreen$Rent, onlygreen$leasing_rate, color=greenbuildings$green_rating, xlab='age', ylab='cluster compare')
qplot(onlygreen$Rent, onlygreen$leasing_rate, color=onlygreen$cluster, xlab='age', ylab='cluster compare')
greenbuildings <- read.csv("greenbuildings.csv")
greenbuildings$cluster_compare = greenbuildings$Rent-greenbuildings$cluster_rent
green_scaled <- scale(greenbuildings, center=TRUE, scale=TRUE)
onlygreen = green_scaled[green_scaled$green_rating==1,]
nongreen = green_scaled[green_scaled$green_rating==0,]
head(green_scaled)
greenbuildings <- read.csv("greenbuildings.csv")
greenbuildings$cluster_compare = greenbuildings$Rent-greenbuildings$cluster_rent
onlygreen = greenbuildings[greenbuildings$green_rating==1,]
nongreen = greenbuildings[greenbuildings$green_rating==0,]
qplot(onlygreen$Rent, onlygreen$leasing_rate, color=onlygreen$cluster, xlab='rent', ylab='lease_rate')
max(greenbuildings$Rent)
?count
count(greenbuildings[greenbuildings$Rent>100])
length(greenbuildings[greenbuildings$Rent>100])
length(greenbuildings[greenbuildings$Rent>100,])
greenbuildings = greenbuildings[greenbuildings$leasing_rate>10,]
greenbuildings = greenbuildings[greenbuildings$Rent<=100,]
onlygreen = greenbuildings[greenbuildings$green_rating==1,]
nongreen = greenbuildings[greenbuildings$green_rating==0,]
plot(onlygreen$cluster_compare, onlygreen$leasing_rate)
qplot(onlygreen$Rent, onlygreen$leasing_rate, color=onlygreen$cluster, xlab='rent', ylab='lease_rate')
head(greenbuildings)
ggplot(greenbuildings, aes(x=green_rating, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
greenbuildings$green_rating = factor(greenbuildings$greenrating)
greenbuildings$green_rating = factor(greenbuildings$green_rating)
qplot(onlygreen$Rent, onlygreen$leasing_rate, color=onlygreen$cluster, xlab='rent', ylab='lease_rate')
ggplot(greenbuildings, aes(x=green_rating, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue"
ggplot(greenbuildings, aes(x=green_rating, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
greenbuildings$green_rating = factor(greenbuildings$green_rating)
greenbuildings$renovated = factor(greenbuildings$renovated)
greenbuildings$class_a = factor(greenbuildings$class_a)
greenbuildings$class_b = factor(greenbuildings$class_b)
greenbuildings$LEED = factor(greenbuildings$LEED)
greenbuildings$Energystar = factor(greenbuildings$Energystar)
greenbuildings$net = factor(greenbuildings$net)
greenbuildings$amenities = factor(greenbuildings$amenities)
greenbuildings$cluster = factor(greenbuildings$cluser)
greenbuildings$cluster = factor(greenbuildings$cluster)
onlygreen = greenbuildings[greenbuildings$green_rating==1,]
nongreen = greenbuildings[greenbuildings$green_rating==0,]
ggplot(greenbuildings, aes(x=cluster, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
greenbuildings <- read.csv("greenbuildings.csv")
#Create a comparison for each building to its cluster's rent
greenbuildings$cluster_compare = greenbuildings$Rent/greenbuildings$cluster_rent
#Remove outliers - lease rates lower than 10 and rents higher than 100
greenbuildings = greenbuildings[greenbuildings$leasing_rate>10,]
greenbuildings = greenbuildings[greenbuildings$Rent<=100,]
#Tell R that some of the variables are factors
greenbuildings$green_rating = factor(greenbuildings$green_rating)
greenbuildings$renovated = factor(greenbuildings$renovated)
greenbuildings$class_a = factor(greenbuildings$class_a)
greenbuildings$class_b = factor(greenbuildings$class_b)
greenbuildings$LEED = factor(greenbuildings$LEED)
greenbuildings$Energystar = factor(greenbuildings$Energystar)
greenbuildings$net = factor(greenbuildings$net)
greenbuildings$amenities = factor(greenbuildings$amenities)
greenbuildings$cluster = factor(greenbuildings$cluster)
onlygreen = greenbuildings[greenbuildings$green_rating==1,]
nongreen = greenbuildings[greenbuildings$green_rating==0,]
head(greenbuildings)
qplot(greenbuildings$size, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='size', ylab='rent')
qplot(greenbuildings$age, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='size', ylab='rent')
ggplot(greenbuildings, aes(x=class_a, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
sum(onlygreen$class_a)
sum(int(onlygreen$class_a)
)
sum(float(onlygreen$class_a))
float?
?float
?integer
sum(as.integer(onlygreen$class_a))
ggplot(greenbuildings, aes(x=green_rating, y=age)) +  geom_boxplot(fill='#A4A4A4', color="blue")
qplot(greenbuildings$age, greenbuildings$Rent, color=greenbuildings$green_rating, xlab='size', ylab='rent')
qplot(greenbuildings$age, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='size', ylab='rent')
ggplot(greenbuildings, aes(x=green_rating, y=class_a)) +  geom_boxplot(fill='#A4A4A4', color="blue")
qplot(greenbuildings$green_rating, greenbuildings$class_a, color=greenbuildings$green_rating, xlab='size', ylab='rent')
mediangreen = median(onlygreen$Rent)
mediangreen
mediannongreen = median(nongreen$Rent)
greenvcluser = median(onlygreen$cluster_compare)
nongreenvcluser = median(nongreen$cluster_compare)
avgvcluster = mean(onlygreen$cluster_compare)
mediannice = median(greenbuildings$class_a)
mediannice = median(greenbuildings$Rent[greenbuildings$class_a == 1,])
#median for nicer buildings (class_a)
mediannice = median(greenbuildings[greenbuildings$class_a == 1,greenbuildings$Rent])
mediannice = median(greenbuildings[greenbuildings$class_a == 1, Rent])
greenbuildings[greenbuildings$class_a == 1, greenbuildings$Rent]
greenbuildings[greenbuildings$class_a == 1,]
greenbuildings[greenbuildings$class_a == 1, 5]
mediannice = median(greenbuildings[greenbuildings$class_a == 1, 5])
medianamenities = median(greenbuildings[greenbuildings$amenities == 1, 16])
medianamenities = median(greenbuildings[greenbuildings$Rent == 1, 16])
medianamenities = median(greenbuildings[greenbuildings$amenities == 1, 5])
greenvcluser = mean(onlygreen$cluster_compare)
avgnice = mean(greenbuildings[greenbuildings$class_a == 1, 5])
avgnice = median(greenbuildings[greenbuildings$class_a == 1, 5])
avgnice = mean(greenbuildings[greenbuildings$class_a == 1, 24])
avgAmenity = mean(greenbuildings[greenbuildings$amenities == 1, 24])
cor(greenbuildings[,c('cluster_compare', 'class_a', 'amenities', 'green_rating')])
?cor
ggplot(greenbuildings, aes(x=green_rating, y=class_a)) +  geom_boxplot(fill='#A4A4A4', color="blue")
qplot(greenbuildings$green_rating, greenbuildings$class_a, color=greenbuildings$green_rating, xlab='size', ylab='rent')
qplot(greenbuildings$age, greenbuildings$cluster_compare, color=greenbuildings$green_rating, xlab='size', ylab='rent')
green/nice = length(greenonly[greenonly$class_a == 1,])/length(greenonly)
green/nice = length(onlygreen[onlygreen$class_a == 1,])/length(onlygreen)
greennice = length(onlygreen[onlygreen$class_a == 1,])/length(onlygreen)
length(onlygreen[onlygreen$class_a == 1,])
length(onlygreen[onlygreen$class_a == 1,1])
greennice = length(onlygreen[onlygreen$class_a == 1,1])/length(onlygreen[,1])
greenamenities = length(onlygreen[onlygreen$amenities == 1,1])/length(onlygreen[,1])
nicegreen = onlygreen[onlygreen$class_a == 1 & onlygreen$amenities == 1, ]
nicenongreen = nongreen[nongreen$class_1 == 1 & nongreen$amenities == 1, ]
GreenNiceMed = median(nicegreen$Rent)
NonGreenMed = median(nicenongreen$Rent)
nicenongreen = nongreen[nongreen$class_a == 1 & nongreen$amenities == 1, ]
NonGreenMed = median(nicenongreen$Rent)
GreenNiceMean = mean(nicegreen$cluster_compare)
NonGreenMean = mean(nicegreen$cluster_compare)
NonGreenMean = mean(nicenongreen$cluster_compare)
NiceWOAgreen = onlygreen[onlygreen$class_a == 1 & onlygreen$amenities == 0, ]
NiceWOAregular = nongreen[nongreen$class_a == 1 & nongreen$amenities == 0, ]
MedNiceWOAgreen = median(NiceWOAgreen$Rent)
MedNiceWOAreg = median(NiceWOAregular$Rent)
NotNiceWAgreen = onlygreen[onlygreen$class_a == 0 & onlygreen$amenities == 1, ]
NotNiceWAregular = nongreen[nongreen$class_a == 0 & nongreen$amenities == 1, ]
MedNotNiceWAgreen = median(NotNiceWAgreen$Rent)
MedNotNiceWAreg = median(NotNiceWAregular$Rent)
NotNiceWOAgreen = onlygreen[onlygreen$class_a == 0 & onlygreen$amenities == 0, ]
NotNiceWOAregular = nongreen[nongreen$class_a == 0 & nongreen$amenities == 0, ]
MedNotNiceWOAgreen = median(NotNiceWOAgreen$Rent)
MedNotNiceWOAreg = median(NotNiceWOAregular$Rent)
ggplot(greenbuildings, aes(x=green_rating, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
niceonly = greenbuildings[greenbuildings$class_a ==1 & nongreen$amenities ==1, ]
niceonly = greenbuildings[greenbuildings$class_a ==1 & greenbuildings$amenities ==1, ]
ggplot(niceonly, aes(x=green_rating, y=Rent)) +  geom_boxplot(fill='#A4A4A4', color="blue")
qplot(niceonly$cluster, niceonly$cluster_compare, color=niceonly$green_rating, xlab='cluster', ylab='rent v. cluster rent')
qplot(niceonly$cluster, niceonly$Rent, color=niceonly$green_rating, xlab='cluster', ylab='rent')
qplot(niceonly$cluster_rent, niceonly$Rent, color=niceonly$green_rating, xlab='cluster', ylab='rent')
ggplot(niceonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")
ggplot(greenbuildings, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")
ggplot(niceonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")
ggplot(niceonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue") +ggtitle("Nice Buildings with Amenities")
MedNiceWOAgreen = median(NiceWOAgreen$cluster_compare)
MedNiceWOAreg = median(NiceWOAregular$cluster_compare)
niceWOAonly = greenbuildings[greenbuildings$class_a ==1 & greenbuildings$amenities ==0, ]
ggplot(niceWOAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="red") +ggtitle("Nice Buildings without Amenities")
MedNotNiceWAgreen = median(NotNiceWAgreen$cluster_compare)
MedNotNiceWAreg = median(NotNiceWAregular$cluster_compare)
ggplot(NotniceWAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="green") +ggtitle("Nice Buildings without Amenities")
NotniceWAonly = greenbuildings[greenbuildings$class_a ==0 & greenbuildings$amenities ==1, ]
ggplot(NotniceWAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="green") +ggtitle("Nice Buildings without Amenities")
MedNotNiceWOAgreen = median(NotNiceWOAgreen$cluster_compare)
MedNotNiceWOAreg = median(NotNiceWOAregular$cluster_compare)
ggplot(NotniceWOAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="cyan") +ggtitle("Not Nice Buildings without Amenities")
NotniceWOAonly = greenbuildings[greenbuildings$class_a ==0 & greenbuildings$amenities ==0, ]
ggplot(NotniceWOAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="cyan") +ggtitle("Not Nice Buildings without Amenities")
ggplot(NotniceWAonly, aes(x=green_rating, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="green") +ggtitle("Not Nice Buildings with Amenities")
diffnice = GreenNiceMed-NonGreenNiceMed
NonGreenNiceMed = median(nicenongreen$cluster_compare)
diffnice = GreenNiceMed-NonGreenNiceMed
diffnice
GreenNiceMed = median(nicegreen$cluster_compare)
diffnice = GreenNiceMed-NonGreenNiceMed
diffnice
diffniceWO = MedNiceWOAgreen-MedNiceWOAreg
diffniceWO
diffnnW = MedNotNiceWAgreen-MedNotNiceWAreg
diffnnw
diffnnW
diffnnWO = MedNotNiceWOAgreen-MedNotNiceWOAreg
diffnnWO
ggplot(greenbuildings, aes(x=class_a, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")
ggplot(greenbuildings, aes(x=class_a, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")
ggplot(greenbuildings, aes(x=amenities, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")+ggtitle("Amenities and Rents")
ggplot(greenbuildings, aes(x=amenities, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="blue")+ggtitle("Amenities and Rents")
ggplot(greenbuildings, aes(x=amenities, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="cyan")+ggtitle("Amenities and Rents")
ggplot(greenbuildings, aes(x=amenities, y=cluster_compare)) +  geom_boxplot(fill='#A4A4A4', color="cyan")+ggtitle("Amenities and Rents")
remove(list = ls())
